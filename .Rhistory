knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(caretEnsemble)
library(randomForest)
library(dplyr)
library(partykit)
library(xgboost)
library(mlbench)
library(e1071)
data11 <- read.csv("churnMLData.csv", header=T, stringsAsFactors = T)
View(data11)
data11 <- data11[,-1]
set.seed(123)
validation_index <- createDataPartition(data11$churnRate, p=0.80, list=FALSE)
traindata_churn <- data11[validation_index,] ### Training dataset
testdata_churn <- data11[-validation_index,] ### Testing dataset
write.csv(traindata_churn, "traindata_churn.csv")
write.csv(testdata_churn, "testdata_churn.csv")
TrainSet <- read.csv("traindata_churn.csv", header = TRUE, stringsAsFactors = T)
TrainSet <- TrainSet[,-1]
TrainSet$date <- as.Date(TrainSet$date)
View(TrainSet)
TestSet <- read.csv("testdata_churn.csv", header = T, stringsAsFactors = T)
TestSet <- TestSet[,-1]
TestSet$date <- as.Date(TestSet$date)
View(TestSet)
control <- trainControl(method="repeatedcv", number=10, repeats = 3)
metric <-"RMSE"
set.seed(71)
churnModel <- train(churnRate ~ date+asin+product.name+productCategory, data=TrainSet, method="rf", metric=metric,
trControl=control)
summary(churnModel)
importance <- varImp(churnModel)
plot(importance)
predictions <- predict(churnModel, TestSet)
predictions
maeRF <- round(mean(abs(TestSet$churnRate - predictions)),15)
rmseRF <- round(sqrt(mean(abs(TestSet$churnRate - predictions)^2)),15)
cat("Random Forest Performance:\n")
cat("MAE:", maeRF, "\n")
cat("RMSE:", rmseRF,"\n\n")
print(churnModel)
plot(churnModel)
churnModelSVM <- svm(churnRate ~ date+asin+product.name+productCategory, data=TrainSet, metric=metric, trControl=control)
predictionsSVM <- predict(churnModelSVM, TestSet)
predictionsSVM
maeSVM <- round(mean(abs(TestSet$churnRate - predictionsSVM)),15)
rmseSVM <- round(sqrt(mean(abs(TestSet$churnRate - predictionsSVM)^2)),15)
cat("Support Vector Machine:\n")
cat("MAE:", maeSVM, "\n")
cat("RMSE:", rmseSVM,"\n\n")
print(churnModelSVM)
print(churnModelSVM)
library(caret)
library(caretEnsemble)
library(randomForest)
library(dplyr)
library(partykit)
library(xgboost)
library(mlbench)
library(e1071)
library(ggplot2)
train_control <- trainControl(method = "cv", number=10)
tune_grid <- expand.grid(alpha =0, lambda=seq(0,1,by=0.1))
churnModelLR <- train(churnRate ~ date+asin+product.name+productCategory, data=TrainSet, metric=metric,method="glmnet", trControl=train_control, tuneGrid=tune_grid)
library(caret)
library(caretEnsemble)
library(randomForest)
library(dplyr)
library(partykit)
library(xgboost)
library(mlbench)
library(e1071)
library(ggplot2)
library(glmnet)
library(caret)
library(caretEnsemble)
library(randomForest)
library(dplyr)
library(partykit)
library(xgboost)
library(mlbench)
library(e1071)
library(ggplot2)
library(glmnet)
churnModelLR <- train(churnRate ~ date+asin+product.name+productCategory, data=TrainSet, metric=metric,method="glmnet", trControl=train_control, tuneGrid=tune_grid)
print(churnModelLR$bestTune)
plot(churnModelLR)
predictionsLR <- predict(churnModelLR, TestSet)
predictionsLR
maeLR <- round(mean(abs(TestSet$churnRate - predictionsLR)),15)
rmseLR <- round(sqrt(mean(abs(TestSet$churnRate - predictionsLR)^2)),15)
cat("Linear Regression:\n")
cat("MAE:", maeLR, "\n")
cat("RMSE:", rmseLR,"\n\n")
ss_total <- sum((TestSet$churnRate-mean(TestSet$churnRate))^2)
ss_residual <- sum((TestSet$churnRate-predictionsLR)^2)
ss_residualLR <- sum((TestSet$churnRate-predictionsLR)^2)
ss_residualLR <- sum((TestSet$churnRate-predictionsLR)^2)
r_squaredLR <- 1-(ss_residualLR/ss_total)
cat("Linear Regression:\n")
cat("MAE:", maeLR, "\n")
cat("RMSE:", rmseLR,"\n\n")
cat("RSquared:", r_squaredLR,"\n")
cat("Linear Regression:\n")
cat("MAE:", maeLR, "\n")
cat("RMSE:", rmseLR,"\n\n")
cat("RSquared:", r_squaredLR,"\n\n")
ss_total <- sum((TestSet$churnRate-mean(TestSet$churnRate))^2)
ss_residualSVM <- sum((TestSet$churnRate-predictionsSVM)^2)
r_squaredSVM <- 1-(ss_residualSVM/ss_total)
cat("Support Vector Machine:\n")
cat("MAE:", maeSVM, "\n")
cat("RMSE:", rmseSVM,"\n\n")
cat("RSquared:", r_squaredSVM,"\n\n")
cat("Random Forest:\n")
cat("MAE:", maeRF, "\n")
cat("RMSE:", rmseRF,"\n")
cat("RSquared:", r_squaredRF,"\n\n")
ss_total <- sum((TestSet$churnRate-mean(TestSet$churnRate))^2)
ss_residualRF <- sum((TestSet$churnRate-predictionsRF)^2)
ss_residualRF <- sum((TestSet$churnRate-predictions)^2)
r_squaredRF <- 1-(ss_residualRF/ss_total)
cat("Random Forest:\n")
cat("MAE:", maeRF, "\n")
cat("RMSE:", rmseRF,"\n")
cat("RSquared:", r_squaredRF,"\n\n")
library(shiny); runApp('testApp/churnTestApp1.R')
runApp('testApp/churnTestApp1.R')
library(shiny); runApp('purchasePredictionApp1.R')
runApp('purchasePredictionApp1.R')
library(shiny); runApp('purchasePredictionApp1.R')
runApp('purchasePredictionApp1.R')
runApp('purchasePredictionApp1.R')
runApp('purchasePredictionApp1.R')
runApp('purchasePredictionApp1.R')
runApp('purchasePredictionApp1.R')
knitr::opts_chunk$set(echo = TRUE)
print(purchasePredictionModel)
set.seed(101)
purchasePredictionModelSVM <- svm(noPurchaseProbability ~ date+asin+product.name+productCategory, data=TrainSet, metric=metric, trControl=control)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(caretEnsemble)
library(randomForest)
library(dplyr)
library(partykit)
library(xgboost)
library(mlbench)
library(e1071)
library(ggplot2)
library(glmnet)
data11 <- read.csv("modelData.csv", header=T, stringsAsFactors = T)
set.seed(123)
validation_index <- createDataPartition(data11$noPurchaseProbability, p=0.80, list=FALSE)
traindata <- data11[validation_index,] ### Training dataset
testdata <- data11[-validation_index,] ### Testing dataset
write.csv(traindata, "traindata.csv")
write.csv(testdata, "testdata.csv")
TrainSet <- read.csv("traindata.csv", header = TRUE, stringsAsFactors = T)
TrainSet <- TrainSet[,-1]
TestSet <- read.csv("testdata.csv", header = T, stringsAsFactors = T)
TestSet <- TestSet[,-1]
View(TrainSet)
View(TestSet)
control <- trainControl(method="repeatedcv", number=5, repeats = 3)
metric <-"RMSE"
set.seed(101)
purchasePredictionModelSVM <- svm(noPurchaseProbability ~ date+asin+product.name+productCategory, data=TrainSet, metric=metric, trControl=control)
data11 <- read.csv("MLData.csv", header=T, stringsAsFactors = T)
data11 <- read.csv("MLData.csv", header=T, stringsAsFactors = T)
set.seed(123)
validation_index <- createDataPartition(data11$noPurchaseProbability, p=0.80, list=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(dtplyr)
library(ggplot2)
library(tidyverse)
library(timeDate)
mlData <- read.csv("cleanedDatasetV1.csv", header = T, stringsAsFactors = T)
dim(mlData)
mlData <- na.omit(mlData)
mlData1 <- mlData%>%
mutate(Purchase = case_when(target == "p" ~  "Purchase",
target == "n" ~  "No Purchase"))
mlData1$date <- as.Date(mlData1$date, format= "%d/%m/%Y")
dim(mlData1)
mlData1$Purchase <- as.factor(mlData1$Purchase)
data11 <- read.csv("modelData.csv", header=T, stringsAsFactors = T)
set.seed(123)
validation_index <- createDataPartition(data11$noPurchaseProbability, p=0.80, list=FALSE)
traindata <- data11[validation_index,] ### Training dataset
testdata <- data11[-validation_index,] ### Testing dataset
write.csv(traindata, "traindata.csv")
write.csv(testdata, "testdata.csv")
TrainSet <- read.csv("traindata.csv", header = TRUE, stringsAsFactors = T)
TrainSet <- TrainSet[,-1]
TrainSet$date <- as.Date(TrainSet$date, format= "%d/%m/%Y")
TestSet <- read.csv("testdata.csv", header = T, stringsAsFactors = T)
TestSet <- TestSet[,-1]
TestSet$date <- as.Date(TestSet$date, format= "%d/%m/%Y")
View(TrainSet)
View(TestSet)
control <- trainControl(method="repeatedcv", number=5, repeats = 3)
metric <-"RMSE"
set.seed(101)
purchasePredictionModelSVM <- svm(noPurchaseProbability ~ date+asin+product.name+productCategory, data=TrainSet, metric=metric, trControl=control)
TrainSet <- na.omit(TrainSet)
control <- trainControl(method="repeatedcv", number=5, repeats = 3)
metric <-"RMSE"
set.seed(101)
purchasePredictionModelSVM <- svm(noPurchaseProbability ~ date+asin+product.name+productCategory, data=TrainSet, metric=metric, trControl=control)
set.seed(71)
purchasePredictionModel <- train(noPurchaseProbability ~ date+asin+product.name+productCategory, data=TrainSet, method="rf", metric=metric,
trControl=control)
data11 <- read.csv("modelData.csv", header=T, stringsAsFactors = T)
set.seed(123)
validation_index <- createDataPartition(data11$noPurchaseProbability, p=0.80, list=FALSE)
traindata <- data11[validation_index,] ### Training dataset
testdata <- data11[-validation_index,] ### Testing dataset
write.csv(traindata, "traindata.csv")
write.csv(testdata, "testdata.csv")
TrainSet <- read.csv("traindata.csv", header = TRUE, stringsAsFactors = T)
TrainSet <- TrainSet[,-1]
TrainSet$date <- as.Date(TrainSet$date)
TestSet <- read.csv("testdata.csv", header = T, stringsAsFactors = T)
TestSet <- TestSet[,-1]
TestSet$date <- as.Date(TestSet$date)
View(TrainSet)
View(TestSet)
TrainSet <- na.omit(TrainSet)
control <- trainControl(method="repeatedcv", number=5, repeats = 3)
metric <-"RMSE"
set.seed(101)
purchasePredictionModelSVM <- svm(noPurchaseProbability ~ date+asin+product.name+productCategory, data=TrainSet, metric=metric, trControl=control)
predictionsSVM <- round(predict(purchasePredictionModelSVM, TestSet),2)
predictionsSVM
maeSVM <- round(mean(abs(TestSet$noPurchaseProbability - predictionsSVM)),15)
rmseSVM <- round(sqrt(mean(abs(TestSet$noPurchaseProbability - predictionsSVM)^2)),15)
ss_total <- sum((TestSet$noPurchaseProbability-mean(TestSet$noPurchaseProbability))^2)
ss_residualSVM <- sum((TestSet$noPurchaseProbability-predictionsSVM)^2)
r_squaredSVM <- 1-(ss_residualSVM/ss_total)
cat("Support Vector Machine:\n")
cat("MAE:", maeSVM, "\n")
cat("RMSE:", rmseSVM,"\n")
cat("RSquared:", r_squaredSVM,"\n\n")
summary(purchasePredictionModelSVM)
train_control <- trainControl(method = "cv", number=10)
tune_grid <- expand.grid(alpha =0, lambda=seq(0,1,by=0.1))
purchasePredictionModelLR <- train(noPurchaseProbability ~ date+asin+product.name+productCategory, data=TrainSet, metric=metric,method="glmnet", trControl=train_control, tuneGrid=tune_grid)
print(purchasePredictionModelLR$bestTune)
print(purchasePredictionModelLR)
summary(purchasePredictionModelLR)
plot(purchasePredictionModelLR)
predictionsLR <- round(predict(purchasePredictionModelLR, TestSet),2)
predictionsLR
set.seed(71)
purchasePredictionModel <- train(noPurchaseProbability ~ date+asin+product.name+productCategory, data=TrainSet, method="rf", metric=metric,
trControl=control)
summary(purchasePredictionModel)
importance <- varImp(purchasePredictionModel)
importance <- varImp(purchasePredictionModel)
importance
importance <- varImp(purchasePredictionModel)
plot(importance)
plot(purchasePredictionModel)
predictions <- predict(purchasePredictionModel, TestSet)
predictions
print(purchasePredictionModel)
train_control <- trainControl(method = "cv", number=5)
tune_grid <- expand.grid(alpha =0, lambda=seq(0,1,by=0.1))
purchasePredictionModelLR <- train(noPurchaseProbability ~ date+asin+product.name+productCategory, data=TrainSet, metric=metric,method="glmnet", trControl=train_control, tuneGrid=tune_grid)
print(purchasePredictionModelLR$bestTune)
print(purchasePredictionModelLR)
conf_matrix <- confusionMatrix(purchasePredictionModelSVM, TestSet$noPurchaseProbability)
actual_values <- TestSet$noPurchaseProbability
predicted_values <- predictionsSVM
plot_data <- data.frame(Actual = actual_values, Predicted = predicted_values)
svmPlot <- ggplot(plot_data, aes(x=Actual, y=Predicted))+geom_point(color="blue")+geom_abline(slope=1, intercept=0, color="red", linetype="dashed")+labs(title="SVM Regression Actual vs Predicted", x="Actual No Purchase Probability", y="Predicted No Purchase Probability")+theme_minimal()
svmPlot <- ggplot(plot_data, aes(x=Actual, y=Predicted))+geom_point(color="blue")+geom_abline(slope=1, intercept=0, color="red", linetype="dashed")+labs(title="SVM Regression Actual vs Predicted", x="Actual No Purchase Probability", y="Predicted No Purchase Probability")+theme_minimal()
svmPlot
residualsSVM = actual_values-predicted_values
residualSVM_data <-data.frame(Actual = actual_values, Predicted = predicted_values, Residuals=residualsSVM)
svmResidualPlot <- ggplot(residual_data, aes(x=Predicted, y=Residuals))+geom_point(color="blue")+geom_hline(yintercept=0, color="red", linetype="dashed")+labs(title="Residual Plot for SVM Model",x="Predicted No Purchase Probability", y="Residuals")+theme_minimal()
residualSVM_data <-data.frame(Actual = actual_values, Predicted = predicted_values, Residuals=residualsSVM)
svmResidualPlot <- ggplot(residualSVM_data, aes(x=Predicted, y=Residuals))+geom_point(color="blue")+geom_hline(yintercept=0, color="red", linetype="dashed")+labs(title="Residual Plot for SVM Model",x="Predicted No Purchase Probability", y="Residuals")+theme_minimal()
svmResidualPlot
actual_values <- TestSet$noPurchaseProbability
predicted_values <- predictionsLR
plot_data <- data.frame(Actual = actual_values, Predicted = predicted_values)
LRPlot <- ggplot(plot_data, aes(x=Actual, y=Predicted))+geom_point(color="blue")+geom_abline(slope=1, intercept=0, color="red", linetype="dashed")+labs(title="Linear Regression Actual vs Predicted", x="Actual No Purchase Probability", y="Predicted No Purchase Probability")+theme_minimal()
LRPlot
LRPlot <- ggplot(plot_data, aes(x=Actual, y=Predicted))+geom_point(color="blue")+geom_abline(slope=1, intercept=0, color="green", linetype="dashed")+labs(title="Linear Regression Actual vs Predicted", x="Actual No Purchase Probability", y="Predicted No Purchase Probability")+theme_minimal()
LRPlot
actual_values <- TestSet$noPurchaseProbability
predicted_values <- purchasePredictionModelLR
plot_data <- data.frame(Actual = actual_values, Predicted = predicted_values)
purchasePredictionsLR <- round(predict(purchasePredictionModelLR, TestSet),2)
purchasePredictionsLR
actual_values <- TestSet$noPurchaseProbability
predicted_values <- purchasePredictionModelLR
plot_data <- data.frame(Actual = actual_values, Predicted = predicted_values)
actual_values <- TestSet$noPurchaseProbability
predicted_values <- purchasePredictionsLR
plot_data <- data.frame(Actual = actual_values, Predicted = predicted_values)
LRPlot <- ggplot(plot_data, aes(x=Actual, y=Predicted))+geom_point(color="blue")+geom_abline(slope=1, intercept=0, color="green", linetype="dashed")+labs(title="Linear Regression Actual vs Predicted", x="Actual No Purchase Probability", y="Predicted No Purchase Probability")+theme_minimal()
LRPlot
actual_values <- TestSet$noPurchaseProbability
predicted_values <- purchasePredictionModel
plot_data <- data.frame(Actual = actual_values, Predicted = predicted_values)
actual_values <- TestSet$noPurchaseProbability
predicted_values <- predictions
plot_data <- data.frame(Actual = actual_values, Predicted = predicted_values)
LRPlot <- ggplot(plot_data, aes(x=Actual, y=Predicted))+geom_point(color="blue")+geom_abline(slope=1, intercept=0, color="tomato", linetype="dashed")+labs(title="Random Forest Actual vs Predicted", x="Actual No Purchase Probability", y="Predicted No Purchase Probability")+theme_minimal()
LRPlot
residualsLR = actual_values-predicted_values
residualLR_data <-data.frame(Actual = actual_values, Predicted = predicted_values, Residuals=residualsLR)
LRResidualPlot <- ggplot(residualSVM_data, aes(x=Predicted, y=Residuals))+geom_point(color="purple")+geom_hline(yintercept=0, color="red", linetype="dashed")+labs(title="Residual Plot for SVM Model",x="Predicted No Purchase Probability", y="Residuals")+theme_minimal()
LRResidualPlot
actual_values <- TestSet$noPurchaseProbability
predicted_valuesLR <- purchasePredictionsLR
plot_data <- data.frame(Actual = actual_values, Predicted = predicted_valuesLR)
LRPlot <- ggplot(plot_data, aes(x=Actual, y=Predicted))+geom_point(color="blue")+geom_abline(slope=1, intercept=0, color="green", linetype="dashed")+labs(title="Linear Regression Actual vs Predicted", x="Actual No Purchase Probability", y="Predicted No Purchase Probability")+theme_minimal()
LRPlot
residualsLR = actual_values-predicted_valuesLR
residualLR_data <-data.frame(Actual = actual_values, Predicted = predicted_values, Residuals=residualsLR)
LRResidualPlot <- ggplot(residualSVM_data, aes(x=Predicted, y=Residuals))+geom_point(color="purple")+geom_hline(yintercept=0, color="black", linetype="dashed")+labs(title="Residual Plot for LR Model",x="Predicted No Purchase Probability", y="Residuals")+theme_minimal()
LRResidualPlot
runApp('purchasePredictionApp1.R')
runApp('E:/R Project Works/app-numeric-car.R')
runApp('purchasePredictionApp1.R')
runApp('purchasePredictionApp1.R')
runApp('purchasePredictionApp1.R')
runApp('purchasePredictionApp1.R')
LRPlot <- ggplot(plot_data, aes(x=Actual, y=Predicted))+geom_point(color="blue")+geom_abline(slope=1, intercept=0, color="red", linetype="dashed")+labs(title="Linear Regression Actual vs Predicted", x="Actual No Purchase Probability", y="Predicted No Purchase Probability")+theme_minimal()
LRPlot
svmPlot <- ggplot(plot_data, aes(x=Actual, y=Predicted))+geom_point(color="blue")+geom_abline(slope=1, intercept=0, color="green", linetype="dashed")+labs(title="SVM Regression Actual vs Predicted", x="Actual No Purchase Probability", y="Predicted No Purchase Probability")+theme_minimal()
svmPlot
svmPlot <- ggplot(plot_data, aes(x=Actual, y=Predicted))+geom_point(color="blue")+geom_abline(slope=1, intercept=0, color="red", linetype="dashed")+labs(title="SVM Regression Actual vs Predicted", x="Actual No Purchase Probability", y="Predicted No Purchase Probability")+theme_minimal()
svmPlot
svmPlot <- ggplot(plot_data, aes(x=Actual, y=Predicted))+geom_point(color="blue")+geom_abline(slope=1, intercept=0, color="green", linetype="dashed")+labs(title="SVM Regression Actual vs Predicted", x="Actual No Purchase Probability", y="Predicted No Purchase Probability")+theme_minimal()
svmPlot
LRPlot <- ggplot(plot_data, aes(x=Actual, y=Predicted))+geom_point(color="blue")+geom_abline(slope=1, intercept=0, color="black", linetype="dashed")+labs(title="Random Forest Actual vs Predicted", x="Actual No Purchase Probability", y="Predicted No Purchase Probability")+theme_minimal()
LRPlot
LRPlot <- ggplot(plot_data, aes(x=Actual, y=Predicted))+geom_point(color="red")+geom_abline(slope=1, intercept=0, color="black", linetype="dashed")+labs(title="Random Forest Actual vs Predicted", x="Actual No Purchase Probability", y="Predicted No Purchase Probability")+theme_minimal()
LRPlot
runApp('purchasePredictionApp1.R')
runApp('purchasePredictionApp1.R')
install.packages("forecast")
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
install.packages("forecast")
library(ggplot2)
actual_values <- TestSet$noPurchaseProbability
predicted_values <- purchasePredictionModel
plot_data <- data.frame(Actual = actual_values, Predicted = predicted_values)
actual_values <- TestSet$noPurchaseProbability
predicted_values <- predictions
plot_data <- data.frame(Actual = actual_values, Predicted = predicted_values)
LRPlot <- ggplot(plot_data, aes(x=Actual, y=Predicted))+geom_point(color="red")+geom_abline(slope=1, intercept=0, color="black", linetype="dashed")+labs(title="Random Forest Actual vs Predicted", x="Actual No Purchase Probability", y="Predicted No Purchase Probability")+theme_minimal()
LRPlot
actual_values <- TestSet$noPurchaseProbability
predicted_values <- predictionsSVM
plot_data <- data.frame(ActualSVM = actual_valuesSVM, PredictedSVM = predicted_valuesSVM)
actual_valuesSVM <- TestSet$noPurchaseProbability
predicted_valuesSVM <- predictionsSVM
plot_data <- data.frame(ActualSVM = actual_valuesSVM, PredictedSVM = predicted_valuesSVM)
svmPlot <- ggplot(plot_data, aes(x=ActualSVM, y=PredictedSVM))+geom_point(color="blue")+geom_abline(slope=1, intercept=0, color="green", linetype="dashed")+labs(title="SVM Regression Actual vs Predicted", x="Actual No Purchase Probability", y="Predicted No Purchase Probability")+theme_minimal()
svmPlot
actual_valuesLR <- TestSet$noPurchaseProbability
predicted_valuesLR <- purchasePredictionsLR
actual_valuesLR <- TestSet$noPurchaseProbability
predicted_valuesLR <- purchasePredictionsLR
plot_data <- data.frame(ActualLR = actual_valuesLR, PredictedLR = predicted_valuesLR)
LRPlot <- ggplot(plot_data, aes(x=ActualLR, y=PredictedLR))+geom_point(color="blue")+geom_abline(slope=1, intercept=0, color="red", linetype="dashed")+labs(title="Linear Regression Actual vs Predicted", x="Actual No Purchase Probability", y="Predicted No Purchase Probability")+theme_minimal()
LRPlot
